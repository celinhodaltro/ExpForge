@page "/widgets"
@using ExpForge.BlazorDemo.Application.DTOs
@using ExpForge.BlazorDemo.Application.Interfaces
@inject IWidgetService WidgetService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Gerenciar Widgets - ExpForge Demo</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2">
                    <i class="bi bi-puzzle"></i>
                    Gerenciar Widgets
                </h1>
                <button class="btn btn-primary" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-circle"></i>
                    Novo Widget
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                </div>
            }
            else if (widgets.Any())
            {
                <div class="row">
                    @foreach (var widget in widgets)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="card-title mb-0">@widget.Name</h5>
                                    <span class="badge @(widget.IsActive ? "bg-success" : "bg-secondary")">
                                        @(widget.IsActive ? "Ativo" : "Inativo")
                                    </span>
                                </div>
                                <div class="card-body">
                                    <p class="card-text">@widget.Description</p>
                                    <div class="mb-2">
                                        <small class="text-muted">
                                            <i class="bi bi-folder"></i>
                                            @widget.TemplatePath
                                        </small>
                                    </div>
                                    <div class="mb-2">
                                        <small class="text-muted">
                                            <i class="bi bi-tag"></i>
                                            Versão: @widget.Version
                                        </small>
                                    </div>
                                    @if (widget.Tags.Any())
                                    {
                                        <div class="mb-3">
                                            @foreach (var tag in widget.Tags)
                                            {
                                                <span class="badge bg-info me-1">@tag</span>
                                            }
                                        </div>
                                    }
                                </div>
                                <div class="card-footer">
                                    <div class="btn-group w-100" role="group">
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => ViewWidget(widget.Id)">
                                            <i class="bi bi-eye"></i>
                                            Ver
                                        </button>
                                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => EditWidget(widget.Id)">
                                            <i class="bi bi-pencil"></i>
                                            Editar
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteWidget(widget.Id)">
                                            <i class="bi bi-trash"></i>
                                            Excluir
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-puzzle display-1 text-muted"></i>
                    <h3 class="text-muted">Nenhum widget encontrado</h3>
                    <p class="text-muted">Crie seu primeiro widget para começar!</p>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="bi bi-plus-circle"></i>
                        Criar Widget
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<WidgetDto> widgets = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWidgets();
    }

    private async Task LoadWidgets()
    {
        isLoading = true;
        try
        {
            var result = await WidgetService.GetAllAsync();
            widgets = result.ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao carregar widgets: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ShowCreateModal()
    {
        // TODO: Implementar modal de criação
        await JSRuntime.InvokeVoidAsync("alert", "Modal de criação será implementado");
    }

    private async Task ViewWidget(Guid widgetId)
    {
        // TODO: Implementar visualização do widget
        await JSRuntime.InvokeVoidAsync("alert", $"Visualizar widget: {widgetId}");
    }

    private async Task EditWidget(Guid widgetId)
    {
        // TODO: Implementar edição do widget
        await JSRuntime.InvokeVoidAsync("alert", $"Editar widget: {widgetId}");
    }

    private async Task DeleteWidget(Guid widgetId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este widget?");
        if (confirmed)
        {
            try
            {
                await WidgetService.DeleteAsync(widgetId);
                await LoadWidgets();
                await JSRuntime.InvokeVoidAsync("alert", "Widget excluído com sucesso!");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Erro ao excluir widget: {ex.Message}");
            }
        }
    }
}
