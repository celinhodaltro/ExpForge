name: Release Pipeline

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

env:
  PACKAGE_PATH: ./build/ExpForge.NpmPackage/package

jobs:
  # =========================
  # 1️⃣ Build e Test
  # =========================
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      package-artifact-path: ${{ steps.upload-artifact.outputs.path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install PowerShell
        run: sudo apt-get update && sudo apt-get install -y powershell

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --no-restore --configuration Release

      - name: Run tests
        run: dotnet test tests/ExpForge.Tests/ExpForge.Tests.csproj --configuration Debug

      - name: Publish NPM artifacts
        if: github.event_name == 'push'
        run: dotnet publish -c Release -p:GenerateNpm=true

      - name: Upload artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        id: upload-artifact
        with:
          name: package
          path: ${{ env.PACKAGE_PATH }}


  # =========================
  # 2️⃣ Deploy NPM / GitHub Packages
  # =========================
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: package
          path: ${{ env.PACKAGE_PATH }}

      - name: Setup Node.js & authenticate NPM
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          always-auth: true

      - name: Check version difference
        id: version-check
        working-directory: ${{ env.PACKAGE_PATH }}
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view expforge version || echo "0.0.0")
          echo "Current version: $CURRENT_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$CURRENT_VERSION" = "$PUBLISHED_VERSION" ]; then
            echo "publish=false" >> $GITHUB_ENV
          else
            echo "publish=true" >> $GITHUB_ENV
          fi

      - name: Build NPM package
        if: env.publish == 'true'
        working-directory: ${{ env.PACKAGE_PATH }}
        run: npm run build --if-present

      - name: Publish to NPM
        if: env.publish == 'true'
        working-directory: ${{ env.PACKAGE_PATH }}
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Rename package.json for GitHub Packages
        if: env.publish == 'true'
        working-directory: ${{ env.PACKAGE_PATH }}
        run: |
          jq '.name = "@celinhodaltro/expforge"' package.json > package.tmp.json
          mv package.tmp.json package.json

      - name: Configure npm for GitHub Packages
        if: env.publish == 'true'
        working-directory: ${{ env.PACKAGE_PATH }}
        run: |
          echo "@celinhodaltro:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> .npmrc

      - name: Publish to GitHub Packages
        if: env.publish == 'true'
        working-directory: ${{ env.PACKAGE_PATH }}
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Create GitHub Release
        if: env.publish == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.sha }}
          release_name: Release v${{ github.sha }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}


  # =========================
  # 3️⃣ Generate Documentation
  # =========================
  generate-docs:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push'
    steps:
      - name: Checkout Documentation repository
        uses: actions/checkout@v4
        with:
              repository: celinhodaltro/ExpForge.Documentation
              token: ${{ secrets.GH_TOKEN }}
              path: ExpForgeDocumentation

      - name: Install ExpForge
        run: npm install -g expforge

      - name: Make ExpForge executable
        run: chmod +x /usr/local/lib/node_modules/expforge/dist/linux-x64/ExpForge.Presentation

      - name: Run Generate-Documentation
        run: expforge Generate-Documentation 

      - name: Copy generated commands to Docs
        run: |
          DEST=ExpForgeDocumentation/src/ExpForge.Documentation.Presentation/Pages/Docs/Commands
          rm -rf $DEST/*
          cp -r ./Commands/* $DEST

      - name: Create Pull Request
        run: |
            cd ExpForgeDocumentation
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git checkout -b update-commands-$GITHUB_SHA
            git add src/ExpForge.Documentation.Presentation/Pages/Docs/Commands
            git commit -m "Update commands documentation from release $GITHUB_SHA" || echo "No changes to commit"
            git push origin update-commands-$GITHUB_SHA
            gh pr create --title "Update commands documentation" \
                            --body "Automatically generated documentation update from ExpForge" \
                            --base main \
                            --head update-commands-$GITHUB_SHA
        env:
            GH_TOKEN: ${{ secrets.GH_TOKEN }}
